{"ast":null,"code":"import _slicedToArray from\"/home/jordi/Documents/ETHZ/Chair_of_systems_design/Ripple/React v4/dev/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from\"react\";import classes from\"./TreeView.module.css\";import List from\"./List\";import useFetch from\"hooks/useFetch\";var TreeView=function TreeView(){var _useFetch=useFetch(\"api/tree_view.json\"),_useFetch2=_slicedToArray(_useFetch,3),loading=_useFetch2[0],data=_useFetch2[1],error=_useFetch2[2];if(loading)return React.createElement(\"p\",null,\"Loading...\");if(error)return React.createElement(\"p\",null,\"Error: \",error.message);return React.createElement(\"ul\",{className:classes.TreeView+\" customScrollBar\"},data.map(function(item){return React.createElement(List,Object.assign({key:item.id},item));}));};export default TreeView;","map":{"version":3,"sources":["/home/jordi/Documents/ETHZ/Chair_of_systems_design/Ripple/React v4/dev/src/components/TreeView/index.js"],"names":["React","classes","List","useFetch","TreeView","loading","data","error","message","map","item","id"],"mappings":"yJAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,uBAApB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,eACUD,QAAQ,sBADlB,wCACdE,OADc,eACLC,IADK,eACCC,KADD,eAErB,GAAIF,OAAJ,CAAa,MAAO,2CAAP,CACb,GAAIE,KAAJ,CAAW,MAAO,wCAAWA,KAAK,CAACC,OAAjB,CAAP,CAEX,MACE,2BAAI,SAAS,CAAEP,OAAO,CAACG,QAAR,CAAmB,kBAAlC,EACGE,IAAI,CAACG,GAAL,CAAS,SAAAC,IAAI,QACZ,qBAAC,IAAD,gBAAM,GAAG,CAAEA,IAAI,CAACC,EAAhB,EAAwBD,IAAxB,EADY,EAAb,CADH,CADF,CAOD,CAZD,CAcA,cAAeN,CAAAA,QAAf","sourcesContent":["import React from \"react\";\r\nimport classes from \"./TreeView.module.css\";\r\nimport List from \"./List\";\r\nimport useFetch from \"hooks/useFetch\";\r\n\r\nconst TreeView = () => {\r\n  const [loading, data, error] = useFetch(`api/tree_view.json`);\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error.message}</p>;\r\n\r\n  return (\r\n    <ul className={classes.TreeView + \" customScrollBar\"}>\r\n      {data.map(item => (\r\n        <List key={item.id} {...item} />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TreeView;\r\n"]},"metadata":{},"sourceType":"module"}